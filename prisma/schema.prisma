// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  address String @unique
}

model Collection {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  address      String        @unique
  name         String
  symbol       String
  supply       Int           @default(1)
  royalty      Float?
  image        String?
  banner       String?
  description  String?
  socials      Json?
  Nfts         Nft[]
  Transactions Transaction[]

  @@map("collection")
}

model Nft {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  token_address String
  token_id      String
  token_uri     String
  name          String?
  owner_address String?
  image         String?
  description   String?
  Collection    Collection    @relation(fields: [token_address], references: [address])
  Activities    NftActivity[]
  Traits        NftTrait[]
  Offers        NftOffer[]
  Listing       ListingNft?

  @@unique([token_address, token_id])
  @@index([token_id])
  @@index([token_address])
}

model ListingNft {
  id                        String       @id @default(auto()) @map("_id") @db.ObjectId
  tx_hash                   String
  created_date              DateTime
  nftId                     String       @unique @db.ObjectId
  collection_address        String
  sale_type                 SaleType
  seller_address            String
  price                     Float
  start_date                DateTime? // available when sale_type is auction
  end_date                  DateTime? // available when sale_type is auction
  min_bid_increment_percent Float? // available when sale_type is auction
  denom                     String
  market                    Marketplace  @default(mrkt)
  expiration_time           Int?
  Nft                       Nft          @relation(fields: [nftId], references: [id])
  Biddings                  NftBidding[]

  @@map("listing_nft")
}

model NftActivity {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  tx_hash        String
  seller_address String?
  buyer_address  String?
  date           DateTime
  price          Float
  denom          String
  event_kind     NftActivityKind
  market         Marketplace     @default(mrkt)
  metadata       Json
  nftId          String          @db.ObjectId
  Nft            Nft             @relation(fields: [nftId], references: [id])
}

model NftTrait {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  attribute    String
  value        String
  display_type String?
  nftId        String  @db.ObjectId
  Nft          Nft     @relation(fields: [nftId], references: [id])
}

model CollectionOffer {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  tx_hash            String
  created_date       DateTime
  buyer_address      String
  collection_address String
  price              Float
  denom              String
  quantity           Int
  current_quantity   Int      @default(0)
  start_date         DateTime
  end_date           DateTime

  @@unique([collection_address, buyer_address, price])
}

model NftOffer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  tx_hash       String
  created_date  DateTime
  nftId         String   @db.ObjectId
  price         Float
  denom         String
  buyer_address String
  start_date    DateTime
  end_date      DateTime
  Nft           Nft      @relation(fields: [nftId], references: [id])

  @@unique([nftId, buyer_address, price])
}

model NftBidding {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  listing_id    String     @db.ObjectId
  tx_hash       String
  created_date  DateTime
  buyer_address String
  price         Float
  denom         String
  Listing       ListingNft @relation(fields: [listing_id], references: [id], onDelete: Cascade)
}

//repersentthe transfering transactions (fixed_sell, accept_sale, accept_offer, bidding)
model Transaction {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  txn_hash           String
  date               DateTime
  volume             Float
  collection_address String
  buyer_address      String
  seller_address     String
  market             Marketplace @default(mrkt)
  Collection         Collection  @relation(fields: [collection_address], references: [address])

  @@index([collection_address])
  @@index([collection_address, date])
}

model StreamTx {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime      @default(now())
  tx_hash    String
  action     String
  is_failure Boolean       @default(false)
  event      Json
  context    StreamContext @default(mrkt)
  message    String?
}

model MissingStreamBlock {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  height  String
  context StreamContext
}

model Config {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value String
}

model CollectionSnapshot {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  collection_address String
  date               DateTime @default(now())
  floor              Float
  volume_of_24h      Float

  @@index([date])
  @@index([collection_address, date])
}

model UserLoyaltyPoint {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  wallet_address String
  date           DateTime
  kind           LoyaltyPointKind
  point          Int
}

view CollectionView {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  address       String
  name          String
  symbol        String
  royalty       Float?
  image         String?
  banner        String?
  description   String?
  socials       Json?
  supply        Int
  listed        Int
  sales         Int
  minted_date   DateTime?
  volume        Float
  floor_price   Float
  volume_of_1h  Float
  volume_of_24h Float
  volume_of_7d  Float
  volume_of_30d Float

  @@map("collection_view")
}

enum NftActivityKind {
  list
  delist
  sale
  make_offer
  cancel_offer

  @@map("nft_activity_kind")
}

enum LoyaltyPointKind {
  sell
  buy
  bid
  xp
}

enum SaleType {
  fixed
  auction

  @@map("sale_type")
}

enum StreamContext {
  mrkt
  pallet
  cwr721
  launchpad

  @@map("stream_context")
}

enum Marketplace {
  mrkt
  pallet
}
